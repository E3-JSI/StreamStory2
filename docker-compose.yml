version: '3.4'

services:
    api:
        # container_name: streamstory_api
        build:
            context: .
            dockerfile: ./services/api/Dockerfile
            args:
                ROOT: ./services/api
        depends_on:
            - db
            - modelling
        volumes:
            - data:/app/data
        links:
            - db
            - modelling
        environment:
            SESSION_SECRET: ${SESSION_SECRET:-secret}
            DB_NAME: streamstory
            DB_USER: root
            DB_PASSWORD: ${DB_PASSWORD:-password}
        restart: unless-stopped

    client:
        # container_name: streamstory_client
        build:
            context: .
            dockerfile: ./services/client/Dockerfile
            args:
                ROOT: ./services/client
        depends_on:
            - api
        links:
            - api
        ports:
            - ${CLIENT_PORT:-80}:80
        environment:
            PORT: 80
        restart: unless-stopped

    db:
        # container_name: streamstory_db
        # image: postgres:11.12
        build:
            context: .
            dockerfile: ./services/db/Dockerfile
            args:
                ROOT: ./services/db
        volumes:
            - ./services/db/data:/var/lib/postgresql/data
            - ./services/db/schema:/docker-entrypoint-initdb.d
            - ./services/db/upgrade:/upgrade
        environment:
            PGDATA: /var/lib/postgresql/data/pgdata
            POSTGRES_DB: streamstory
            POSTGRES_USER: root
            POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
        restart: unless-stopped

    modelling:
        # container_name: streamstory_modelling
        build:
            context: .
            dockerfile: ./services/modelling/Dockerfile
            args:
                ROOT: ./services/modelling
        volumes:
            - data:/app/data
        restart: unless-stopped

volumes:
    data:
